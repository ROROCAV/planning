function path = A_star_search(map,MAX_X,MAX_Y)
%
%This part is about map/obstacle/and other settings
    %pre-process the grid map, add offset
    size_map = size(map,1);
    Y_offset = 0;
    X_offset = 0;
    
    %Define the 2D grid map array.
    %Obstacle=-1, Target = 0, Start=1
    MAP=2*(ones(MAX_X, MAX_Y));
    
    %Initialize MAP with location of the target
    xval=floor(map(size_map, 1)) + X_offset;
    yval=floor(map(size_map, 2)) + Y_offset;
    xTarget=xval;
    yTarget=yval;
    MAP(xval,yval)=0;
    
    %Initialize MAP with location of the obstacle
    for i = 2: size_map-1
        xval=floor(map(i, 1)) + X_offset;
        yval=floor(map(i, 2)) + Y_offset;
        MAP(xval,yval)=-1;
    end 
    
    %Initialize MAP with location of the start point
    xval=floor(map(1, 1)) + X_offset;
    yval=floor(map(1, 2)) + Y_offset;
    xStart=xval;
    yStart=yval;
    MAP(xval,yval)=1;

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %LISTS USED FOR ALGORITHM
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %OPEN LIST STRUCTURE
    %--------------------------------------------------------------------------
    % IS ON LIST 1/0 |X val |Y val |Parent X val |Parent Y val |h(n) |g(n)|f(n)|
    %--------------------------------------------------------------------------
    OPEN=[];
    %CLOSED LIST STRUCTURE
    %--------------
    % X val | Y val |
    %--------------
    % CLOSED=zeros(MAX_VAL,2);
    CLOSED=[];

    %Put all obstacles on the Closed list
    k=1;%Dummy counter
    for i=1:MAX_X
        for j=1:MAX_Y
            if(MAP(i,j) == -1)
                CLOSED(k,1)=i;
                CLOSED(k,2)=j;
                k=k+1;
            end
        end
    end
    CLOSED_COUNT=size(CLOSED,1);
    %set the starting node as the first node
    xNode=xval;
    yNode=yval;
    OPEN_COUNT=1;
    goal_distance=distance(xNode,yNode,xTarget,yTarget);
    path_cost=0;
    OPEN(OPEN_COUNT,:)=insert_open(xNode,yNode,xNode,yNode,goal_distance,path_cost,goal_distance);
    OPEN(OPEN_COUNT,1)=1;
    CLOSED_COUNT=CLOSED_COUNT+1;
    CLOSED(CLOSED_COUNT,1)=xNode;
    CLOSED(CLOSED_COUNT,2)=yNode;
    NoPath=1;

%%
%This part is your homework
    function bEmpty = isEmpty(open_list)
        bEmpty = sum(open_list(1,:)) <= 0;
        % disp(open_list(1,:));
        % disp(sum(open_list(1,:)));
        % disp(bEmpty);
    end
    function bInOpen = isInOpen(open_list,x, y)
        n = sum((open_list(:,1)==1) & (open_list(:,2)==x) & (open_list(:,3)==y));
        bInOpen = (n>0);
    end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% START ALGORITHM
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    while(~isEmpty(OPEN)) %you have to dicide the Conditions for while loop exit 
        i_min = min_fn(OPEN, OPEN_COUNT, xTarget, yTarget);
        disp(i_min);
        % fprintf(isEmpty(OPEN));
        OPEN(i_min,1) = 0;
        CLOSED_COUNT = CLOSED_COUNT + 1;
        CLOSED(CLOSED_COUNT, 1:2) = OPEN(i_min, 2:3);

        node_x = OPEN(i_min, 2);
        node_y = OPEN(i_min, 3);
        if node_x == xTarget && node_y == yTarget
            NoPath = 0;
            fprintf('I am out!\n');
            break;
        end
        
        gn = OPEN(i_min, 7);
        exp_array = expand_array(node_x, node_y, gn, xTarget, yTarget,CLOSED, MAX_X, MAX_Y);

        n_neighbor = size(exp_array, 1);
        for i = 1:n_neighbor
            xval = exp_array(i,1);
            yval = exp_array(i,2);
            hval = exp_array(i,3);
            gval = exp_array(i,4);
            fval = exp_array(i,5);

            if isInOpen(OPEN, xval, yval)
                n_index = node_index(OPEN,xval,yval);
                if gval < OPEN(n_index, 7)
                    OPEN(n_index, 4:8) = [node_x node_y hval gval fval];
                end
            else
                OPEN_COUNT = OPEN_COUNT + 1;
                OPEN(OPEN_COUNT,:) = insert_open(xval,yval,node_x,node_y,hval,gval,fval);
            end
        end

    end %End of While Loop
    
    %Once algorithm has run The optimal path is generated by starting of at the
    %last node(if it is the target node) and then identifying its parent node
    %until it reaches the start node.This is the optimal path
    
    %
    %How to get the optimal path after A_star search?
    %please finish it
    %
    
    path = [];

    visit_nodes = OPEN;
    path_length = 0;
    if NoPath == 0
        xval = xTarget;
        yval = yTarget;
        path_length = OPEN(node_index(OPEN,xval,yval), 7);
        while true
            path = [xval yval; path];
            % disp(path)
            n_index = node_index(OPEN,xval,yval);
            xval = OPEN(n_index, 4);
            yval = OPEN(n_index, 5);
            if xval == xStart && yval == yStart
                path = [xval yval; path];
                break;
            end
        end
        fprintf('FInd the target\n');
    else
        fprintf('No Path\n');
    end
end

